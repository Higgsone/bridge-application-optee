/* SPDX-License-Identifier: (GPL-2.0+ OR BSD-3-Clause) */
/*
 * Copyright (C) STMicroelectronics 2022 - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>
#include <dt-bindings/clock/stm32mp1-clksrc.h>
#include <dt-bindings/soc/stm32mp15-etzpc.h>

#include "stm32mp153.dtsi"
#include "stm32mp15xd.dtsi"
#include "stm32mp15xxab-pinctrl.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/power/stm32mp1-power.h>
/* USER CODE END includes */

/ {
        model = "Higgsone Bridge v2.0 (OP-TEE)";
        compatible = "st,stm32mp153d-bridge-cubemx-mx", "st,stm32mp153";

        memory@c0000000 {
                device_type = "memory";
                reg = <0xc0000000 0x20000000>;

                /* USER CODE BEGIN memory */
                /* USER CODE END memory */
        };

        /* USER CODE BEGIN root */
        vin: vin {
                compatible = "regulator-fixed";
                regulator-name = "vin";
                regulator-min-microvolt = <5000000>;
                regulator-max-microvolt = <5000000>;
                regulator-always-on;
        };

        aliases {
                serial0 = &uart4;
        };

        chosen {
                stdout-path = "serial0:115200n8";
        };
        /* USER CODE END root */

        clocks {
                /* USER CODE BEGIN clocks */
                /* USER CODE END clocks */

                clk_lse: clk-lse {
                        st,digbypass;

                        /* USER CODE BEGIN clk_lse */
                        /* USER CODE END clk_lse */
                };

                clk_hse: clk-hse {
                        st,bypass;

                        /* USER CODE BEGIN clk_hse */
                        /* USER CODE END clk_hse */
                };
        };

}; /*root*/

&clk_hse {
        st,bypass;
};

&clk_lse {
        st,digbypass;
};

&pinctrl {
        i2c4_pins_mx: i2c4_mx-0 {
                pins {
                        pinmux = <STM32_PINMUX('B', 8, AF6)>, /* I2C4_SCL */
                                         <STM32_PINMUX('B', 9, AF6)>; /* I2C4_SDA */
                        bias-disable;
                        drive-open-drain;
                        slew-rate = <0>;
                };
        };

        sdmmc1_pins_mx: sdmmc1_mx-0 {
                pins1 {
                        pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
                                         <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
                                         <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
                                         <STM32_PINMUX('D', 2, AF12)>, /* SDMMC1_CMD */
                                         <STM32_PINMUX('E', 6, AF8)>; /* SDMMC1_D2 */
                        bias-disable;
                        drive-push-pull;
                        slew-rate = <1>;
                };
                pins2 {
                        pinmux = <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
                        bias-disable;
                        drive-push-pull;
                        slew-rate = <3>;
                };
                pins3 {
                        pinmux = <STM32_PINMUX('E', 4, AF8)>; /* SDMMC1_CKIN */
                        bias-disable;
                };
        };

        sdmmc2_pins_mx: sdmmc2_mx-0 {
                pins1 {
                        pinmux = <STM32_PINMUX('A', 8, AF9)>, /* SDMMC2_D4 */
                                         <STM32_PINMUX('A', 9, AF10)>, /* SDMMC2_D5 */
                                         <STM32_PINMUX('B', 3, AF9)>, /* SDMMC2_D2 */
                                         <STM32_PINMUX('B', 4, AF9)>, /* SDMMC2_D3 */
                                         <STM32_PINMUX('B', 14, AF9)>, /* SDMMC2_D0 */
                                         <STM32_PINMUX('B', 15, AF9)>, /* SDMMC2_D1 */
                                         <STM32_PINMUX('C', 7, AF10)>, /* SDMMC2_D7 */
                                         <STM32_PINMUX('E', 5, AF9)>, /* SDMMC2_D6 */
                                         <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
                        bias-disable;
                        drive-push-pull;
                        slew-rate = <1>;
                };
                pins2 {
                        pinmux = <STM32_PINMUX('E', 3, AF9)>; /* SDMMC2_CK */
                        bias-disable;
                        drive-push-pull;
                        slew-rate = <3>;
                };
        };

        uart4_pins_mx: uart4_mx-0 {
                pins1 {
                        pinmux = <STM32_PINMUX('B', 2, AF8)>; /* UART4_RX */
                        bias-disable;
                };
                pins2 {
                        pinmux = <STM32_PINMUX('G', 11, AF6)>; /* UART4_TX */
                        bias-disable;
                        drive-push-pull;
                        slew-rate = <0>;
                };
        };

        /* USER CODE BEGIN pinctrl */
        /* USER CODE END pinctrl */
};

&bsec{
        status = "okay";

        /* USER CODE BEGIN bsec */
        board_id: board_id@ec {
                reg = <0xec 0x4>;
                st,non-secure-otp;
        };
        /* USER CODE END bsec */
};

&etzpc{
        status = "okay";
        st,decprot = <
        /*"NS_R S_W" peripherals*/
        DECPROT(STM32MP1_ETZPC_DDRCTRL_ID, DECPROT_NS_R_S_W, DECPROT_LOCK)
        DECPROT(STM32MP1_ETZPC_DDRPHYC_ID, DECPROT_NS_R_S_W, DECPROT_LOCK)
        /*"Non Secured" peripherals*/
        DECPROT(STM32MP1_ETZPC_DMA1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_DMAMUX_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_HASH1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_I2C1_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_I2C4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_SDMMC3_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_DLYBSD3_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_UART4_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_UART5_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_UART7_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_USART3_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_OTG_ID, DECPROT_NS_RW, DECPROT_UNLOCK)
        /*"Secured" peripherals*/
        DECPROT(STM32MP1_ETZPC_STGENC_ID, DECPROT_S_RW, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_RNG1_ID, DECPROT_S_RW, DECPROT_UNLOCK)
        /*"Mcu Isolation" peripherals*/
        DECPROT(STM32MP1_ETZPC_DMA2_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_SPI1_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_SPI2_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_USART2_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)
        DECPROT(STM32MP1_ETZPC_USART6_ID, DECPROT_MCU_ISOLATION, DECPROT_UNLOCK)

        /*Restriction: following IDs are not managed  - please to use User-Section if needed:
                  STM32MP1_ETZPC_SRAMx_ID  STM32MP1_ETZPC_RETRAM_ID  STM32MP1_ETZPC_BKPSRAM_ID*/

        /* USER CODE BEGIN etzpc_decprot */
                /*STM32CubeMX generates a basic and standard configuration for ETZPC.
                Additional device configurations can be added here if needed.
                "etzpc" node could be also overloaded in "addons" User-Section.*/
        /* USER CODE END etzpc_decprot */
        >;

        /* USER CODE BEGIN etzpc */
        /* USER CODE END etzpc */
};

&i2c4{
        compatible = "st,stm32mp15-i2c-non-secure";
        pinctrl-names = "default";
        pinctrl-0 = <&i2c4_pins_mx>;
        status = "okay";

        /* USER CODE BEGIN i2c4 */
        i2c-scl-rising-time-ns = <185>;
        i2c-scl-falling-time-ns = <20>;
        clock-frequency = <400000>;

        pmic: stpmic@33 {
                compatible = "st,stpmic1";
                reg = <0x33>;
                interrupt-controller;
                #interrupt-cells = <2>;
                status = "okay";

                regulators {
                        compatible = "st,stpmic1-regulators";
                        buck1-supply = <&vin>;
                        buck2-supply = <&vin>;
                        buck3-supply = <&vin>;
                        buck4-supply = <&vin>;
                        ldo2-supply = <&vin>;
                        ldo3-supply = <&vdd_ddr>;
                        ldo4-supply = <&vin>;
                        ldo5-supply = <&vin>;
                        vref_ddr-supply = <&vin>;
                        boost-supply = <&vin>;
                        pwr_sw1-supply = <&bst_out>;
                        pwr_sw2-supply = <&bst_out>;

                        vddcore: buck1 {
                                regulator-name = "vddcore";
                                regulator-min-microvolt = <1200000>;
                                regulator-max-microvolt = <1350000>;
                                regulator-always-on;
                                regulator-initial-mode = <0>;
                                regulator-over-current-protection;
                        };

                        vdd_ddr: buck2 {
                                regulator-name = "vdd_ddr";
                                regulator-min-microvolt = <1350000>;
                                regulator-max-microvolt = <1350000>;
                                regulator-always-on;
                                regulator-initial-mode = <0>;
                                regulator-over-current-protection;
                        };

                        vdd: buck3 {
                                regulator-name = "vdd";
                                regulator-min-microvolt = <1800000>;
                                regulator-max-microvolt = <1800000>;
                                regulator-always-on;
                                st,mask-reset;
                                regulator-initial-mode = <0>;
                                regulator-over-current-protection;
                        };

                        v3v3: buck4 {
                                regulator-name = "v3v3";
                                regulator-min-microvolt = <3300000>;
                                regulator-max-microvolt = <3300000>;
                                regulator-always-on;
                                regulator-over-current-protection;
                                regulator-initial-mode = <0>;
                        };

                        v1v8_vdda: ldo2 {
                                regulator-name = "v1v8_vdda";
                                regulator-min-microvolt = <1800000>;
                                regulator-max-microvolt = <1800000>;
                                regulator-always-on;
                        };

                        vtt_ddr: ldo3 {
                                regulator-name = "vtt_ddr";
                                // regulator-min-microvolt = <500000>;
                                // regulator-max-microvolt = <750000>;
                                regulator-always-on;
                                regulator-over-current-protection;
                        };

                        vdd_usb: ldo4 {
                                regulator-name = "vdd_usb";
                                regulator-min-microvolt = <3300000>;
                                regulator-max-microvolt = <3300000>;
                                regulator-always-on;
                        };

                        vdd_sd: ldo5 {
                                regulator-name = "vdd_sd";
                                regulator-min-microvolt = <3300000>;
                                regulator-max-microvolt = <3300000>;
                                regulator-boot-on;
                        };

                        vref_ddr: vref_ddr {
                                regulator-name = "vref_ddr";
                                regulator-always-on;
                        };

                        bst_out: boost {
                                regulator-name = "bst_out";
                        };

                        vbus_otg: pwr_sw1 {
                                regulator-name = "vbus_otg";
                        };

                        vbus_sw: pwr_sw2 {
                                regulator-name = "vbus_sw";
                                regulator-active-discharge = <1>;
                        };
                };
        };
        /* USER CODE END i2c4 */
};

// &iwdg2{
//      status = "okay";

//      /* USER CODE BEGIN iwdg2 */
//      /* USER CODE END iwdg2 */
// };

&osc_calibration {
	csi-calibration {
		status = "okay";
	};

	hsi-calibration {
		status = "okay";
	};
};

&pwr_regulators{
        /* USER CODE BEGIN pwr_regulators */
        system_suspend_supported_soc_modes = <
        STM32_PM_CSLEEP_RUN
        STM32_PM_CSTOP_ALLOW_LP_STOP
        STM32_PM_CSTOP_ALLOW_LPLV_STOP
    >;
    system_off_soc_mode = <STM32_PM_SHUTDOWN>;
        vdd-supply = <&vdd>;
        vdd_3v3_usbfs-supply = <&vdd_usb>;
        /* USER CODE END pwr_regulators */
};

&rcc{
        st,clksrc = <
                CLK_MPU_PLL1P
                CLK_AXI_PLL2P
                CLK_MCU_PLL3P
                CLK_PLL12_HSE
                CLK_PLL3_HSE
                CLK_PLL4_HSE
                CLK_RTC_LSE
                CLK_MCO1_LSE
                CLK_MCO2_DISABLED
        >;
        st,clkdiv = <
                1               /*MPU*/
                0               /*AXI*/
                0               /*MCU*/
                1               /*APB1*/
                1               /*APB2*/
                1               /*APB3*/
                1               /*APB4*/
                2               /*APB5*/
                0               /*RTC*/
                0               /*MCO1*/
                0               /*MCO2*/
        >;
        st,pkcs = <
                CLK_CKPER_DISABLED
                CLK_ETH_DISABLED
                CLK_SDMMC12_PLL3R
                CLK_STGEN_HSE
                CLK_USBPHY_HSE
                CLK_SPI2S1_PLL4P
                CLK_SPI2S23_PLL4P
                CLK_SPI45_DISABLED
                CLK_SPI6_DISABLED
                CLK_I2C46_HSI
                CLK_SDMMC3_PLL3R
                CLK_USBO_USBPHY
                CLK_ADC_DISABLED
                CLK_CEC_DISABLED
                CLK_I2C12_PCLK1
                CLK_I2C35_DISABLED
                CLK_UART1_DISABLED
                CLK_UART24_HSI
                CLK_UART35_PCLK1
                CLK_UART6_PCLK2
                CLK_UART78_PCLK1
                CLK_SPDIF_DISABLED
                CLK_SAI1_DISABLED
                CLK_SAI2_DISABLED
                CLK_SAI3_DISABLED
                CLK_SAI4_DISABLED
                CLK_RNG1_CSI
                CLK_LPTIM1_DISABLED
                CLK_LPTIM23_DISABLED
                CLK_LPTIM45_DISABLED
        >;
        pll1:st,pll@0 {
                compatible = "st,stm32mp1-pll";
                reg = <0>;
                cfg = < 1 65 0 1 1 PQR(1,0,0) >;
                frac = < 0x1555 >;
        };
        pll2:st,pll@1 {
                compatible = "st,stm32mp1-pll";
                reg = <1>;
                cfg = < 2 65 1 1 0 PQR(1,0,1) >;
                frac = < 0x1400 >;
        };
        pll3:st,pll@2 {
                compatible = "st,stm32mp1-pll";
                reg = <2>;
                cfg = < 1 49 2 1 2 PQR(1,0,1) >;
        };
        pll4:st,pll@3 {
                compatible = "st,stm32mp1-pll";
                reg = <3>;
                cfg = < 1 33 2 1 7 PQR(1,0,0) >;
        };
};

&rng1{
        status = "okay";

        /* USER CODE BEGIN rng1 */
        /* USER CODE END rng1 */
};

&rtc{
        status = "okay";

        /* USER CODE BEGIN rtc */
        /* USER CODE END rtc */
};

&uart4{
        pinctrl-names = "default";
        pinctrl-0 = <&uart4_pins_mx>;
        status = "okay";
};

/* USER CODE BEGIN addons */
&cpu0{
        cpu-supply = <&vddcore>;
};

&cpu1{
        cpu-supply = <&vddcore>;
};
/* USER CODE END addons */
